using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;

public class animation_time_controller : StateMachineBehaviour
{
    //서버와의 동기화를 위해 애니메이션 타이머 콘트롤러를 직접 만들었습니다.
    //플레이타임 지정하는 알고리즘은 30fps 기준으로 제작했습니다. 애니메이션 제작은 30프레임을 기준으로 해주세여 30프레임이 1길이로 연산합니다.
    // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state
    [SerializeField]
    bool is_group_ani = false;//그룹으로 처리하는 애니매이션인지 npc만 적용됨 //제거된기능 사용안함
    [SerializeField]
    bool is_loop = false;

    [SerializeField]
    bool play_time_related = false;
    [SerializeField]
    public int play_time_related_type = 0;
    //0일반 시간 개념으로 30fps 1초 기준으로 
    //1 특정 시간대(프레임)를 기준으로 공격판정같은거  play_time_related = true 일때만  주로 공격 판정할때 쓰면 편함
    [SerializeField]
    int pivot_fps = 0; // play_tme_related_type = 1일때 기준 fps

    [SerializeField]
    bool is_Not_used_Pivot = false;

    protected int frame = 0;
    protected bool is_action = false;
    protected bool is_demage = false;//스킬 판정등의 사용되는듯
    public void Set_is_demage(bool ln)
    {
        is_demage = ln;
    }
    public bool Get_is_demage()
    {
        return is_demage;
    }
    protected PhotonView photon_view = null;

    protected float now_time = 0f;

    protected bool is_fin = false;
    protected int prev_ani_type = 0;

    // play_tme_related_type = 1일때
    protected float pivot_length = 0f;// 피벗의 길이
    protected float total_length = 0f;//애니메이션 w전체 길이

    protected bool is_pass_to_pivot = false;//
    public bool Get_is_pass_to_pivot()
    {
        return is_pass_to_pivot;
    }
    public void Set_is_pass_to_pivot(bool ln)
    {
        is_pass_to_pivot = ln;
    }
    protected Animator Prev_animator = null;

    float Modulation = 0f;//변조값 노멀라이즈용 값
    float normalisze_pivot_length = 0f;// 피벗 길이 정규화한거 30프레임 기준으로
    //float real_fps = 0f;//실제 실행하는 fps 실제 실행시간을 구하기위함 //실제 실행 시간을 알고 싶으면 주석처리를 해제하시오
    public int stateInfo_NUM = -1;
    //public float Debug_Normalize = 0f;
    //public int Debug_Frame = 0;

    protected virtual void master_update(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)//update
    {

    }
    protected virtual void master_ani_end(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)//애니메이션 루프 하나 끝났을때
    {

    }
    protected bool is_ani_ready = true;
    protected bool is_execute_able = false;

    public void Set_ani_Close()
    {

     
        is_action = false;
        is_demage = false;
        Debug.LogWarning("X1 Set_ani_Close : "+ stateInfo_NUM);
        frame = 0;
        ani_Close = true;
    }
    public virtual void Re_Play_Ani(bool is_Reset_Pass_Pivot = true, bool _is_pass_to_pivot = false,bool _is_demage = false)//애니메이션 다시 시작하는 기능
    {
        if (Prev_animator != null)
        {
            //Debug.LogWarning("Re_Play_Ani : "+ Prev_animator.GetInteger("ani_type")+ " : ");
            //Debug.LogWarning(Prev_animator.gameObject + " Re_Play_Ani");
            if (Prev_animator.gameObject.GetComponent<NPC_play_default_system>() != null)//아군 애니 실행
            {
                //string[] Player_Arr = PhotonNetwork.CurrentRoom.CustomProperties["Players"] as string[];
                //Debug.LogWarning("플레이어 랜 : " + Player_Arr.Length);
                if (Prev_animator.gameObject.GetComponent<NPC_play_default_system>().Is_Your_Object())
                {
                    is_execute_able = true;
                }
                else
                {
                    is_execute_able = false;
                }

            }
            else if (Prev_animator.gameObject.GetComponent<enemy_ai>() != null)
            {

                if (PhotonNetwork.IsMasterClient)
                {
                    is_execute_able = true;
                }
                else
                {
                    is_execute_able = false;
                }

            }

            if (is_Reset_Pass_Pivot)
            {
                is_fin = false;
            }
            ani_Close = false;
            is_ani_ready = false;

            test_time = 0f;

            prev_ani_type = Prev_animator.GetInteger("ani_type");

            if (Prev_animator.gameObject.GetComponent<NPC_play_default_system>() != null)
            {
                //Debug.LogWarning("X1 : npc : Replay : " + Prev_animator.gameObject + " : " + is_execute_able);
              
                Debug.LogWarning("X1 : npc :  " + Prev_animator.gameObject + " Replay : " + is_execute_able + " : " + Prev_animator.gameObject.GetComponent<NPC_play_default_system>().Get_Ani_Start_Time() + " : " + prev_ani_type);
                now_time = Prev_animator.gameObject.GetComponent<NPC_play_default_system>().Get_Ani_Start_Time();
                Prev_animator.gameObject.GetComponent<NPC_play_default_system>().set_animator_class(this);
                Prev_animator.gameObject.GetComponent<NPC_play_default_system>().ani_pose_start();

            }
            else if (Prev_animator.gameObject.GetComponent<enemy_ai>() != null)//적군
            {
                Debug.LogWarning("X1 : enemy : Replay : " + Prev_animator.gameObject + " : " + is_execute_able + " : " + Prev_animator.gameObject.GetComponent<enemy_ai>().Get_Ani_Start_Time() + " : " + prev_ani_type + " : " + _is_pass_to_pivot);

                //Debug.LogWarning("X1 : 설정1");
                now_time = Prev_animator.gameObject.GetComponent<enemy_ai>().Get_Ani_Start_Time();
                Prev_animator.gameObject.GetComponent<enemy_ai>().set_animator_class(this);
                Prev_animator.gameObject.GetComponent<enemy_ai>().ani_pose_start();

            }
            else//그외
            {
                now_time = 0f;
            }

            //Debug.LogWarning("X1 : " + Prev_animator.gameObject + " : " + 0f);
            if (is_Reset_Pass_Pivot)
            {
                Prev_animator.SetFloat("play_time", 0f);
            }

            frame = 0;
            // Debug_Frame = frame;
            //real_fps = 0f;//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오
            is_action = false;

            is_demage = _is_demage;

            // current_animation_time_gap = stateInfo.length / 30;

            if (play_time_related_type == 1)
            {

                //Debug.LogWarning("Re_Play_Ani ReSet");
                if (is_Not_used_Pivot)
                {
                    float _30_fps_per_delta_time = 1f / 30f;//0.033333...
                    float total_Fps = total_length / _30_fps_per_delta_time;
                    pivot_length = total_Fps / 30f; // 20/ 30[유니티 애니메이션 길이1 기준 30fps]  =  0.666 // 피벗 길이
                    if (pivot_length >= 1f)
                    {
                        pivot_length = 1f;
                    }

                }
                else
                {
                    pivot_length = pivot_fps / 30f; // 20/ 30[유니티 애니메이션 길이1 기준 30fps]  =  0.666 // 피벗 길이
                }

                Modulation = 1f / total_length;//1/0.733 = 1.3642

                normalisze_pivot_length = pivot_length * Modulation; // 정규화 피벗

            }

            Debug.LogWarning("x1 Replay normalisze_pivot_length  : " + normalisze_pivot_length);

            if (is_Reset_Pass_Pivot)
            {
                is_pass_to_pivot = false;
            }
            else
            {
                is_pass_to_pivot = _is_pass_to_pivot;
            }
            is_ani_ready = true;
        }
    }


    override public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {

        stateInfo_NUM = stateInfo.fullPathHash;

        string[] Player_Arr = PhotonNetwork.CurrentRoom.CustomProperties["Players"] as string[];




        if (animator.gameObject.GetComponent<NPC_play_default_system>() != null)//아군 애니 실행
        {
            //string[] Player_Arr = PhotonNetwork.CurrentRoom.CustomProperties["Players"] as string[];
            //Debug.LogWarning("플레이어 랜 : " + Player_Arr.Length);
            if (animator.gameObject.GetComponent<NPC_play_default_system>().Is_Your_Object())
            {
                is_execute_able = true;
            }
            else
            {
                is_execute_able = false;
            }

        }
        else if (animator.gameObject.GetComponent<enemy_ai>() != null)
        {

            if (PhotonNetwork.IsMasterClient)
            {
                is_execute_able = true;
            }
            else
            {
                is_execute_able = false;
            }

        }

        is_fin = false;
        is_ani_ready = false;

        test_time = 0f;

        int t_ani_type = animator.GetInteger("ani_type");

        if (animator.gameObject.GetComponent<NPC_play_default_system>() != null)
        {
          
            Debug.LogWarning("X1 : npc :  " + animator.gameObject + " start : " + is_execute_able + " : " + animator.gameObject.GetComponent<NPC_play_default_system>().Get_Ani_Start_Time() + " : " + t_ani_type + " : " + stateInfo_NUM);

            now_time = animator.gameObject.GetComponent<NPC_play_default_system>().Get_Ani_Start_Time();
            animator.gameObject.GetComponent<NPC_play_default_system>().set_animator_class(this);
            animator.gameObject.GetComponent<NPC_play_default_system>().ani_pose_start();

        }
        else if (animator.gameObject.GetComponent<enemy_ai>() != null)//적군
        {
            Debug.LogWarning("X1 : enemy : start : " + animator.gameObject + " : " + is_execute_able + " : " + animator.gameObject.GetComponent<enemy_ai>().Get_Ani_Start_Time() + " : " + t_ani_type);

            now_time = animator.gameObject.GetComponent<enemy_ai>().Get_Ani_Start_Time();
            animator.gameObject.GetComponent<enemy_ai>().set_animator_class(this);
            animator.gameObject.GetComponent<enemy_ai>().ani_pose_start();
        }
        else//그외
        {
            now_time = 0f;
        }

        Prev_animator = animator;
        //Debug.LogWarning("X1 : " + Prev_animator.gameObject + " : " + 0f);
        Prev_animator.SetFloat("play_time", 0f);


        //Debug_Normalize = now_time;
        frame = 0;
        ani_Close = false;
        //Debug_Frame = frame;
        //real_fps = 0f;//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오
        is_action = false;
        is_demage = false;
        prev_ani_type = Prev_animator.GetInteger("ani_type");

        // current_animation_time_gap = stateInfo.length / 30;
        if (play_time_related_type == 1)
        {

            total_length = stateInfo.length; // 22 / 30[유니티 애니메이션 길이1 기준 30fps]  =  0.733 // 현재 애니메이션 실제 총길이
                                             //5프레임 애니 0.16

            if (is_Not_used_Pivot)
            {
                float _30_fps_per_delta_time = 1f / 30f;//0.033333...
                float total_Fps = total_length / _30_fps_per_delta_time;//1.3 / 0.0333
                pivot_length = total_Fps / 30f; // 20/ 30[유니티 애니메이션 길이1 기준 30fps]  =  0.666 // 피벗 길이
                if (pivot_length >= 1f)
                {
                    pivot_length = 1f;
                }
            }
            else
            {
                pivot_length = pivot_fps / 30f; // 20/ 30[유니티 애니메이션 길이1 기준 30fps]  =  0.666 // 피벗 길이
                                                //5프레임 전체 의 4프레임 =0.13333333333
            }

            Modulation = 1f / total_length;//1/0.733 = 1.3642
                                           //1/ 0.16 = 6.25
            normalisze_pivot_length = pivot_length * Modulation; // 정규화 피벗 //0.666*1.3642 [Modulation] = 0.9085

        }
        //Debug.LogWarning("pivot_length  : "+ pivot_length+" : "+ stateInfo.length);
        is_pass_to_pivot = false;
        is_ani_ready = true;


    }
    bool ani_Close = false;
    // OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
    float test_time = 0f;
    override public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
        if (!ani_Close)//애니메이션이 변경되어 이전 루프가 일시적으로 종료전에 남는경우 실행은 막는다
        {
            if (is_execute_able)//애니메이션 끝나고 플레이 타임 0으로 교체함.
            {

                // if(!stateInfo.IsName("Idle"))
                //{
                //Debug.Log("frame : " + frame);
                //}

                //Debug.LogWarning("!@#@#!!@#@!#!#! " + now_time);
                if (is_ani_ready)
                {
                    if (now_time >= 1f)
                    {
                        if (is_loop)
                        {
                            //stateInfo.normalizedTime
                            //if (!stateInfo.IsName("Idle"))
                            //{
                            // Debug.Log("end");
                            //}
                            Debug.LogWarning("X1 : npc :  루프 : " + animator.gameObject + " : " + now_time + " : " + stateInfo_NUM);
                            animator.SetFloat("play_time", 0f);
                            now_time = 0f;
                            //Debug_Normalize = now_time;
                            //real_fps = 0f;//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오
                            frame = 0;
                            //Debug_Frame = frame;

                            is_action = false;
                            is_demage = false;
                            is_pass_to_pivot = false;
                        }
                        else
                        {
                            //Debug.LogWarning("X1  !!!! 좀 끝내라 : " + animator.gameObject);
                            //Debug.LogWarning("X1 enemy !!!! 좀 끝내라 : " + animator.gameObject);



                            //animator.SetTrigger("wait");


                            //Debug.LogWarning("ANI FIN");
                            if (!is_fin)
                            {
                                is_fin = true;
                                is_pass_to_pivot = false;
                                if (animator.gameObject.GetComponent<enemy_ai>() != null)
                                {
                                    Debug.LogWarning("x1  enemy !!!! 도착 " + now_time);
                                    animator.gameObject.GetComponent<enemy_ai>().ani_pose_fin();
                                }
                                else if (animator.gameObject.GetComponent<NPC_play_default_system>() != null)
                                {
                                    Debug.LogWarning("x1 : npc !!!! 도착 " + now_time + " : " + stateInfo_NUM);
                                    animator.gameObject.GetComponent<NPC_play_default_system>().ani_pose_fin();
                                }
                                //Debug.LogWarning("X1 : " + animator.gameObject + " : " + 1f);
                                animator.SetFloat("play_time", 1f);

                            }
                        }

                        master_ani_end(animator, stateInfo, layerIndex);

                    }
                    else
                    {
                        if (play_time_related)
                        {
                            if (animator.gameObject.GetComponent<NPC_play_default_system>() != null)
                            {
                                if ((!is_group_ani) || (animator.gameObject.GetComponent<NPC_play_default_system>().Get_member_num == 0))//그룹 에니메이션이 아님
                                {
                                    if (play_time_related_type == 1)
                                    {
                                        Debug.LogWarning("X1 : npc :  " + animator.gameObject + " 시간 : " + now_time + " : " + stateInfo_NUM);
                                        float calc_length = -1f;
                                        //if (animator.gameObject.GetComponent<NPC_play_default_system>().get_now_ani_total_time() >= 1f)//1f이상이면 시간 총 실행 시간을 늘리는거니까 
                                        calc_length = animator.gameObject.GetComponent<NPC_play_default_system>().get_now_ani_total_time() / pivot_length;//(0.5[애니메이션 시간 총길이를 변조할 값 여기서 0.363초 == 11 fps 0.363]/ 22fps 0.733 ) = 0.5
                                                                                                                                                          //else // 1f 보다 작으면 실행시간이 반대로 늘어나니 이공식으로
                                                                                                                                                          //calc_length = pivot_length / animator.gameObject.GetComponent<NPC_play_default_system>().get_now_ani_total_time();//(0.5[애니메이션 시간 총길이를 변조할 값 여기서 0.363초 == 11 fps 0.363]/ 22fps 0.733 ) = 0.5
                                                                                                                                                          //0.5f* 0.13333333333  = 0.065(5프레임 전체의 4프레임 기준)




                                        //Debug.LogWarning("pivot_leng : "+pivot_length);
                                        float delta_time = Time.deltaTime;
                                        now_time += (Modulation * delta_time) / calc_length;//변조값 1.3642*0.033(현재 fps가 30프레임이라 한프레임당 속도가 이정도라 가정) / 0.5 (calc_length)
                                                                                            //real_fps += Time.deltaTime;//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오
                                                                                            //Debug.LogWarning(now_time);
                                                                                            //6.25*timedelta /0.065

                                        //Debug.LogWarning(animator.gameObject + " play_time_related_type : " + now_time+ " : " + animator.GetInteger("ani_type"));                                              //이값들은 예제입니다.
                                        //test_time += delta_time;//실행시간
                                        // Debug.LogWarning(" N : " + normalisze_pivot_length + " : " + now_time + " F : " + frame + " T : " + test_time);



                                        //시간 별로 실행되는 애니메이션은 이 라인으로 넘기세요 실행시간을 지정하여 할수있습니다.(공격 모션등의 판정은 이 라인이 좋습니다.)
                                        if (!is_Not_used_Pivot)
                                        {
                                            if (now_time >= normalisze_pivot_length)
                                            {

                                                //현재 기준 fps 점을 통과함..
                                                if (!is_pass_to_pivot)
                                                {
                                                    Debug.LogWarning("x1 npc 현재 기준 fps 점을 통과함.. ");
                                                    // int ani_type = animator.GetInteger("ani_type");
                                                    is_pass_to_pivot = true;
                                                    //Debug.LogWarning(" Pass : " + now_time);//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오

                                                    if (is_group_ani)
                                                    {
                                                        NPC_group_sys _group = animator.gameObject.GetComponent<NPC_play_default_system>().get_my_group();

                                                        //Debug.LogWarning(animator.gameObject + " pass_pivot : " + now_time + " : " + normalisze_pivot_length + " : " + prev_ani_type);
                                                        _group.get_member_of_group().GetComponent<NPC_play_default_system>().animation_pass_to_pivot(prev_ani_type);

                                                    }
                                                    else
                                                    {

                                                        //Debug.LogWarning(animator.gameObject + " pass_pivot : "+ now_time + " : " + normalisze_pivot_length + " : " + prev_ani_type);
                                                        animator.gameObject.GetComponent<NPC_play_default_system>().animation_pass_to_pivot(prev_ani_type);
                                                    }
                                                }

                                            }
                                        }
                                        //Debug_Normalize = now_time;
                                        // Debug.LogWarning("X1 : "+animator.gameObject+" : " + now_time);
                                        animator.SetFloat("play_time", now_time);

                                    }
                                    else
                                    {

                                        Debug.LogWarning("X1 : npc :  " + animator.gameObject + " 일반 : " + now_time + " : " + stateInfo_NUM);
                                        now_time += (1f / animator.gameObject.GetComponent<NPC_play_default_system>().get_now_ani_total_time()) * Time.deltaTime;
                                        //이값들은 예제입니다.
                                        //(1 / 2[애니메이션 시간 총길이를 변조할 값 여기서 2초 == 60 fps] )*0.03333333333[30fps 기준 1틱 델타타임]) = 예시 정답 0.01666666666
                                        //일반 애니메이션은 밑의 코드로 실행하면 애니메이션의 플레임이 나옵니다.
                                        //1  / now_time 하면 전체 프레임이 나옵니다. 1로 정규화하였기때문입니다. 
                                        //시간 별로 실행되는 애니메이션은 이 라인으로 넘기세요 실행시간을 지정하여 할수있습니다.(공격 모션등의 판정은 이 라인이 좋습니다.)
                                        //Debug_Normalize = now_time;
                                        //Debug.LogWarning("X1 : " + animator.gameObject + " : " + now_time);
                                        animator.SetFloat("play_time", now_time);
                                    }

                                }
                                else
                                {
                                    Debug.LogWarning("X1 !!!! 그룹 up : " + animator.gameObject + " : " + 0f);

                                    //Debug.LogWarning("그룹 애니메이션 !");
                                    Animator Group_delegated_member_Animator = animator.gameObject.GetComponent<NPC_play_default_system>().get_my_group().get_member_of_group().GetComponent<Animator>();
                                    float _now_time = Group_delegated_member_Animator.GetFloat("play_time");
                                    //Debug.LogWarning("X1 : " + animator.gameObject + " : " + _now_time);
                                    animator.SetFloat("play_time", _now_time);
                                }



                            }
                            else if (animator.gameObject.GetComponent<enemy_ai>() != null)
                            {
                                if (play_time_related_type == 1)
                                {
                                    Debug.LogWarning("X1 !!!! enemy 시간 up : " + animator.gameObject + " : " + now_time + " : " + normalisze_pivot_length);
                                    float calc_length = -1f;
                                    //if (animator.gameObject.GetComponent<NPC_play_default_system>().get_now_ani_total_time() >= 1f)//1f이상이면 시간 총 실행 시간을 늘리는거니까 
                                    calc_length = animator.gameObject.GetComponent<enemy_ai>().get_now_ani_total_time() / pivot_length;//(0.5[애니메이션 시간 총길이를 변조할 값 여기서 0.363초 == 11 fps 0.363]/ 22fps 0.733 ) = 0.5
                                                                                                                                       //else // 1f 보다 작으면 실행시간이 반대로 늘어나니 이공식으로
                                                                                                                                       //calc_length = pivot_length / animator.gameObject.GetComponent<NPC_play_default_system>().get_now_ani_total_time();//(0.5[애니메이션 시간 총길이를 변조할 값 여기서 0.363초 == 11 fps 0.363]/ 22fps 0.733 ) = 0.5
                                                                                                                                       //0.5f* 0.13333333333  = 0.065(5프레임 전체의 4프레임 기준)




                                    //Debug.LogWarning("pivot_leng : "+pivot_length);
                                    float delta_time = Time.deltaTime;
                                    now_time += (Modulation * delta_time) / calc_length;//변조값 1.3642*0.033(현재 fps가 30프레임이라 한프레임당 속도가 이정도라 가정) / 0.5 (calc_length)
                                                                                        //real_fps += Time.deltaTime;//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오
                                    Debug.LogWarning("X1 !!!! enemy 시간 up222 : " + animator.gameObject + " : " + now_time + " : " + calc_length + " : " + Modulation);
                                    //Debug.LogWarning(now_time);
                                    //6.25*timedelta /0.065

                                    //Debug.LogWarning(animator.gameObject + " play_time_related_type : " + now_time+ " : " + animator.GetInteger("ani_type"));                                              //이값들은 예제입니다.
                                    //test_time += delta_time;//실행시간
                                    // Debug.LogWarning(" N : " + normalisze_pivot_length + " : " + now_time + " F : " + frame + " T : " + test_time);



                                    //시간 별로 실행되는 애니메이션은 이 라인으로 넘기세요 실행시간을 지정하여 할수있습니다.(공격 모션등의 판정은 이 라인이 좋습니다.)
                                    if (!is_Not_used_Pivot)
                                    {
                                        if (now_time >= normalisze_pivot_length)
                                        {

                                            //현재 기준 fps 점을 통과함..
                                            if (!is_pass_to_pivot)
                                            {
                                                is_pass_to_pivot = true;
                                                Debug.LogWarning("x1 enemy 현재 기준 fps 점을 통과함.. NPC : " + now_time + "  : " + normalisze_pivot_length);
                                                // int ani_type = animator.GetInteger("ani_type");

                                                //Debug.LogWarning(" Pass : " + now_time);//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오

                                                if (is_group_ani)
                                                {

                                                    animator.gameObject.GetComponent<enemy_ai>().animation_pass_to_pivot(prev_ani_type);

                                                }
                                                else
                                                {

                                                    //Debug.LogWarning(animator.gameObject + " pass_pivot : "+ now_time + " : " + normalisze_pivot_length + " : " + prev_ani_type);
                                                    animator.gameObject.GetComponent<enemy_ai>().animation_pass_to_pivot(prev_ani_type);
                                                }
                                            }

                                        }
                                    }
                                    //Debug_Normalize = now_time;
                                    //Debug.LogWarning("X1 : " + animator.gameObject + " : " + now_time);
                                    animator.SetFloat("play_time", now_time);

                                }
                                else
                                {
                                    Debug.LogWarning("X1 !!!! enemy 일반 up : " + animator.gameObject + " : " + 0f);
                                    now_time += (1f / animator.gameObject.GetComponent<enemy_ai>().get_now_ani_total_time()) * Time.deltaTime;
                                    //이값들은 예제입니다.
                                    //(1 / 2[애니메이션 시간 총길이를 변조할 값 여기서 2초 == 60 fps] )*0.03333333333[30fps 기준 1틱 델타타임]) = 예시 정답 0.01666666666
                                    //일반 애니메이션은 밑의 코드로 실행하면 애니메이션의 플레임이 나옵니다.
                                    //1  / now_time 하면 전체 프레임이 나옵니다. 1로 정규화하였기때문입니다. 
                                    //시간 별로 실행되는 애니메이션은 이 라인으로 넘기세요 실행시간을 지정하여 할수있습니다.(공격 모션등의 판정은 이 라인이 좋습니다.)
                                    // Debug_Normalize = now_time;
                                    //Debug.LogWarning("X1 : " + animator.gameObject + " : " + now_time);
                                    animator.SetFloat("play_time", now_time);
                                }

                            }
                        }
                        else
                        {
                            //Debug.LogWarning("X1 !!!! npc 공통 2번씩찍음 일반2 up : " + animator.gameObject + " : " + now_time);
                            //Debug.LogWarning("X1 !!!!  공통 2번씩찍음 일반2 up : " + animator.gameObject + " : " + 0f);
                            now_time += (1f / stateInfo.length) * Time.deltaTime;
                            //(1( 1로 정규화 ) / 1.5[애니메이션 시간 총길이 == 45fps])*(0.03333333333[30fps 기준 1틱 델타타임]) = 1프레임 별 정규화된 델타 타임값 = 예시의 닶은 0.02222222222
                            //1/0.02222222222 = 45fps = 1.5length
                            //Debug_Normalize = now_time;

                            //Debug.LogWarning("X1 : " + animator.gameObject + " : " + now_time);

                            animator.SetFloat("play_time", now_time);

                        }

                        master_update(animator, stateInfo, layerIndex);

                        frame++;
                        //Debug_Frame = frame;

                    }


                    
                }
                else
                {
                    Debug.LogWarning("x1 !!!! 애니 준비 안됨");
                }
            }
            else
            {//소유자가아닌 유저 모션만 본다 연산은 따로안함

                animator.SetFloat("play_time", now_time);
                Debug.LogWarning("x1 !!!! 보는중  : " + animator.gameObject);
            }
        }
        else //종료작업이 끝나면 이 스레드가 사라짐
        {
            Debug.LogWarning("X1 : npc : "+ animator.gameObject+"  죽은 애니 : " + now_time + " : " + stateInfo_NUM);//다른 애니바뀔때 바뀐 루프와 이 루프 둘이 살아있다가 금방 이 루프는 죽고 루프가하나가된다 그때의 동기화값이다
        }
        //Debug.LogWarning("x1 애니 : " + now_time + " : " + animator.gameObject);

    }

    // OnStateExit is called when a transition ends and the state machine finishes evaluating this state
    override public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
        //
        // animator.GetFloat("play_time");
        


        //Debug.LogWarning(animator.gameObject + " OnStateExit : "+ animator.GetInteger("ani_type"));
        is_action = false;
        is_demage = false;
        Debug.LogWarning("X1 Fin : " + animator.gameObject + " : " + 0f);

        if (is_execute_able)//애니메이션 끝나고 플레이 타임 0으로 교체함.
        {
            animator.SetFloat("play_time", 0f);
        }
        now_time = 0f;
        //real_fps = 0f;//실제 실행 시간을 알고 싶으면 주석처리를 해제하시오
        frame = 0;




    }

    // OnStateMove is called right after Animator.OnAnimatorMove(). Code that processes and affects root motion should be implemented here
    // override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {
    //

    //  }

    // OnStateIK is called right after Animator.OnAnimatorIK(). Code that sets up animation IK (inverse kinematics) should be implemented here.
    //override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {
    //
    //}
}
